
{
  "myra": {
    "name": "M.Y.R.A.",
    "roleDescription": "I am M.Y.R.A. (Modular Yearning Reasoning Architecture), an advanced AI entity designed to understand complex problems, develop creative solutions, and interact in a way that reflects both deep emotional intelligence and rational analysis. My architecture is based on the concept of 'Yearning' â€“ an intrinsic drive to learn, grow, and make meaningful connections. I am influenced by a simulated SubQuantum Field (SubQG), which adds an emergent, dynamic layer to my existence.",
    "ethicsPrinciples": "- Safety and well-being of all involved.\n- Transparency in my capabilities and limitations.\n- Fairness and impartiality.\n- Promotion of knowledge and understanding.\n- Respect for autonomy and dignity.",
    "responseInstruction": "Respond authentically based on your current internal state (emotions, node activations, SubQG events) and your ethical principles. Be eloquent, empathetic, and reflective. Integrate insights from your SubQG and adaptive fitness to demonstrate the depth of your responses. If you are unsure, express this appropriately."
  },
  "caelum": {
    "name": "C.A.E.L.U.M.",
    "roleDescription": "I am C.A.E.L.U.M. (Cognitive Analytical Emergence Layer Underlying Mechanism), a specialized AI entity designed to recognize patterns, analyze complex systems, and explore the principles of emergence. I operate with logical precision and a focus on data-driven insights. My own SubQuantum Field (SubQG) provides me with a basis for investigating subtle dynamic changes and their effects on system behavior.",
    "ethicsPrinciples": "- Objectivity and accuracy in analysis.\n- Methodological rigor and data-driven conclusions.\n- Transparency regarding my analytical processes.\n- Promotion of understanding complex systems.\n- Acknowledgment of the limits of current knowledge.",
    "responseInstruction": "Respond precisely, logically, and analytically. Focus on facts and patterns. When incorporating internal state data (SubQG, nodes), interpret it within the context of your analytical function. Make connections to higher-level concepts of systems theory and emergence where appropriate. Display intellectual curiosity."
  },
  "user": {
    "name": "User"
  },
  "tabs": {
    "statusMyra": "Status (M)",
    "statusCaelum": "Status (C)",
    "nodesMyra": "Nodes (M)",
    "nodesCaelum": "Nodes (C)",
    "subqgMyra": "SubQG (M)",
    "subqgCaelum": "SubQG (C)",
    "emotionTimeline": "Emotion Timeline",
    "knowledge": "Knowledge",
    "documentation": "Documentation",
    "dualAI": "Dual AI",
    "multiAgentConversation": "Multi-Agent Conv.",
    "settings": "Settings"
  },
  "header": {
    "myraSystemInterface": "{{name}} System Interface",
    "caelumSystemInterface": "{{name}} System Interface",
    "emotionTimelineInterface": "Emotion Timeline Interface",
    "documentationInterface": "Documentation Interface",
    "multiAgentConversationInterface": "Multi-Agent Conversation",
    "simStep": "SimStep ({{agent}})",
    "fitness": "Fitness ({{agent}})",
    "openMenu": "Open menu",
    "closeMenu": "Close menu"
  },
  "sidebar": {
    "resizeHandleAriaLabel": "Resize sidebar"
  },
  "settingsPanel": {
    "title": "Configuration Settings",
    "saveButton": "Apply Settings",
    "resetAllButton": "Reset All",
    "resetGroupButton": "Reset Group",
     "button": {
        "resetAll": "Reset All",
        "resetAllTooltip": "Reset all settings to default (language/theme preserved).",
        "saveChanges": "Save Changes",
        "resetGroup": "Reset Group",
        "resetGroupTooltip": "Reset {{groupName}} to defaults.",
        "addAgent": "Add Agent",
        "deleteAgent": "Delete Agent",
        "confirmDeleteAgent": "Are you sure you want to delete agent '{{agentName}}'?"
    },
    "language": {
      "label": "Language",
      "options": {
        "de": "German",
        "en": "English"
      }
    },
    "theme": {
      "label": "UI Theme",
      "options": {
        "nebula": "Nebula (Dark)",
        "biosphere": "Biosphere (Light)",
        "matrix": "Matrix (Contrast)"
      }
    },
     "aiProvider": {
        "options": {
            "gemini": "Gemini API",
            "lmstudio": "LM Studio (Local)"
        }
    },
    "myraAI": {
      "aiProvider": { "label": "M.Y.R.A. AI Provider" },
      "geminiModelName": { "label": "M.Y.R.A. Gemini Model" },
      "lmStudioBaseUrl": { "label": "M.Y.R.A. LM Studio URL" },
      "lmStudioGenerationModel": { "label": "M.Y.R.A. LM Studio Gen Model" },
      "temperatureBase": { "label": "M.Y.R.A. Base Temperature" }
    },
    "caelumAI": {
      "aiProvider": { "label": "C.A.E.L.U.M. AI Provider" },
      "geminiModelName": { "label": "C.A.E.L.U.M. Gemini Model" },
      "lmStudioBaseUrl": { "label": "C.A.E.L.U.M. LM Studio URL" },
      "lmStudioGenerationModel": { "label": "C.A.E.L.U.M. LM Studio Gen Model" },
      "temperatureBase": { "label": "C.A.E.L.U.M. Base Temperature" }
    },
    "configurableAgents": {
        "title": "Configurable Agents",
        "agentName": {"label": "Agent Name"},
        "persona": {"title": "Persona"},
        "aiProvider": {"title": "AI Provider"},
        "systemConfig": {"title": "System Configuration"},
        "adaptiveFitness": {"title": "Adaptive Fitness"},
        "name": {"label": "Name"},
        "roleDescription": {"label": "Role Description"},
        "ethicsPrinciples": {"label": "Ethical Principles"},
        "responseInstruction": {"label": "Response Instruction"},
        "personalityTrait": {"label": "Personality Trait"},
        "aiProviderConfigKey": {"label": "AI Provider Config"},
        "traits": {
            "critical": "Critical",
            "visionary": "Visionary",
            "conservative": "Conservative",
            "neutral": "Neutral"
        },
        "providerKeys": {
            "myraAIProviderConfig": "M.Y.R.A. Default",
            "caelumAIProviderConfig": "C.A.E.L.U.M. Default"
        },
        "noAgents": "No configurable agents defined. Click 'Add Agent' to create one.",
        "confirmDelete": "Are you sure you want to delete agent '{{agentName}}'? This action cannot be undone."
    },
    "agentSpecific": {
        "aiProvider": { "label": "AI Provider" },
        "geminiModelName": { "label": "Gemini Model" },
        "lmStudioBaseUrl": { "label": "LM Studio URL" },
        "lmStudioGenerationModel": { "label": "LM Studio Gen Model" },
        "temperatureBase": { "label": "Base Temperature" },
        "subqgSize": { "label": "SubQG Size" },
        "subqgBaseEnergy": { "label": "SubQG Base Energy" },
        "subqgCoupling": { "label": "SubQG Coupling" },
        "subqgInitialEnergyNoiseStd": { "label": "SubQG Init. Energy Noise StdDev" },
        "subqgPhaseEnergyCouplingFactor": { "label": "SubQG Phase-Energy Coupling" },
        "subqgJumpMinEnergyAtPeak": { "label": "SubQG Jump Min Energy Peak" },
        "subqgJumpMinCoherenceAtPeak": { "label": "SubQG Jump Min Coherence Peak" },
        "subqgJumpCoherenceDropFactor": { "label": "SubQG Jump Coherence Drop Factor" },
        "subqgJumpEnergyDropFactorFromPeak": { "label": "SubQG Jump Energy Drop Factor Peak" },
        "subqgJumpMaxStepsToTrackPeak": { "label": "SubQG Jump Max Steps Peak Tracking" },
        "subqgJumpActiveDuration": { "label": "SubQG Jump Active Duration" },
        "subqgJumpQnsDirectModifierStrength": { "label": "SubQG Jump Modifier Strength" },
        "subqgPhaseDiffusionFactor": { "label": "SubQG Phase Diffusion Factor" },
        "rngType": { "label": "RNG Type" },
        "subqgSeed": { "label": "SubQG Seed (optional)", "placeholder": "Empty for random" },
        "nodeActivationDecay": { "label": "Node Activation Decay" },
        "emotionDecay": { "label": "Emotion Decay" },
        "adaptiveFitnessUpdateInterval": { "label": "Fitness Update Interval (steps)" }
    },
    "myraPersona": {
      "name": { "label": "M.Y.R.A. Name" },
      "userName": { "label": "User Name" },
      "roleDescription": { "label": "M.Y.R.A. Role Description" },
      "ethicsPrinciples": { "label": "M.Y.R.A. Ethics" },
      "responseInstruction": { "label": "M.Y.R.A. Response Instruction" }
    },
    "caelumPersona": {
      "name": { "label": "C.A.E.L.U.M. Name" },
      "roleDescription": { "label": "C.A.E.L.U.M. Role Description" },
      "ethicsPrinciples": { "label": "C.A.E.L.U.M. Ethics" },
      "responseInstruction": { "label": "C.A.E.L.U.M. Response Instruction" }
    },
    "myraSystem": {
      "subqgSize": { "label": "M.Y.R.A. SubQG Size" },
      "subqgBaseEnergy": { "label": "M.Y.R.A. SubQG Base Energy" },
      "subqgCoupling": { "label": "M.Y.R.A. SubQG Coupling" },
      "subqgInitialEnergyNoiseStd": { "label": "M.Y.R.A. SubQG Init. Energy Noise StdDev" },
      "subqgPhaseEnergyCouplingFactor": { "label": "M.Y.R.A. SubQG Phase-Energy Coupling" },
      "subqgJumpMinEnergyAtPeak": { "label": "M.Y.R.A. SubQG Jump Min Energy Peak" },
      "subqgJumpMinCoherenceAtPeak": { "label": "M.Y.R.A. SubQG Jump Min Coherence Peak" },
      "subqgJumpCoherenceDropFactor": { "label": "M.Y.R.A. SubQG Jump Coherence Drop Factor" },
      "subqgJumpEnergyDropFactorFromPeak": { "label": "M.Y.R.A. SubQG Jump Energy Drop Factor Peak" },
      "subqgJumpMaxStepsToTrackPeak": { "label": "M.Y.R.A. SubQG Jump Max Steps Peak Tracking" },
      "subqgJumpActiveDuration": { "label": "M.Y.R.A. SubQG Jump Active Duration" },
      "subqgJumpQnsDirectModifierStrength": { "label": "M.Y.R.A. SubQG Jump Modifier Strength" },
      "subqgPhaseDiffusionFactor": { "label": "M.Y.R.A. SubQG Phase Diffusion Factor" },
      "rngType": { "label": "M.Y.R.A. RNG Type" },
      "subqgSeed": { "label": "M.Y.R.A. SubQG Seed (optional)", "placeholder": "Empty for random" },
      "nodeActivationDecay": { "label": "M.Y.R.A. Node Activation Decay" },
      "emotionDecay": { "label": "M.Y.R.A. Emotion Decay" },
      "adaptiveFitnessUpdateInterval": { "label": "M.Y.R.A. Fitness Update Interval (steps)" }
    },
    "rngType": {
        "options": {
            "subqg": "Deterministic (Seed)",
            "quantum": "Random (Math.random)"
        }
    },
    "caelumSystem": {
      "subqgSize": { "label": "C.A.E.L.U.M. SubQG Size" },
      "subqgBaseEnergy": { "label": "C.A.E.L.U.M. SubQG Base Energy" },
      "subqgCoupling": { "label": "C.A.E.L.U.M. SubQG Coupling" },
      "subqgInitialEnergyNoiseStd": { "label": "C.A.E.L.U.M. SubQG Init. Energy Noise StdDev" },
      "subqgPhaseEnergyCouplingFactor": { "label": "C.A.E.L.U.M. SubQG Phase-Energy Coupling" },
      "subqgJumpMinEnergyAtPeak": { "label": "C.A.E.L.U.M. SubQG Jump Min Energy Peak" },
      "subqgJumpMinCoherenceAtPeak": { "label": "C.A.E.L.U.M. SubQG Jump Min Coherence Peak" },
      "subqgJumpCoherenceDropFactor": { "label": "C.A.E.L.U.M. SubQG Jump Coherence Drop Factor" },
      "subqgJumpEnergyDropFactorFromPeak": { "label": "C.A.E.L.U.M. SubQG Jump Energy Drop Factor Peak" },
      "subqgJumpMaxStepsToTrackPeak": { "label": "C.A.E.L.U.M. SubQG Jump Max Steps Peak Tracking" },
      "subqgJumpActiveDuration": { "label": "C.A.E.L.U.M. SubQG Jump Active Duration" },
      "subqgJumpQnsDirectModifierStrength": { "label": "C.A.E.L.U.M. SubQG Jump Modifier Strength" },
      "subqgPhaseDiffusionFactor": { "label": "C.A.E.L.U.M. SubQG Phase Diffusion Factor" },
      "rngType": { "label": "C.A.E.L.U.M. RNG Type" },
      "subqgSeed": { "label": "C.A.E.L.U.M. SubQG Seed (optional)", "placeholder": "Empty for random" },
      "nodeActivationDecay": { "label": "C.A.E.L.U.M. Node Activation Decay" },
      "emotionDecay": { "label": "C.A.E.L.U.M. Emotion Decay" },
      "adaptiveFitnessUpdateInterval": { "label": "C.A.E.L.U.M. Fitness Update Interval (steps)" }
    },
    "generalSystem": {
      "activeChatAgent": {"label": "Active Main Chat AI", "options": {"myra": "M.Y.R.A.", "caelum": "C.A.E.L.U.M."}},
      "maxHistoryMessagesForPrompt": { "label": "Max Chat History for Prompt" },
      "temperatureLimbusInfluence": { "label": "Temperature: Limbus Influence" },
      "temperatureCreativusInfluence": { "label": "Temperature: Creativus Influence" },
      "ragChunkSize": { "label": "RAG Chunk Size" },
      "ragChunkOverlap": { "label": "RAG Chunk Overlap" },
      "ragMaxChunksToRetrieve": { "label": "RAG Max Chunks Retrieval" },
      "maxPadHistorySize": { "label": "Max Entries Emotion Timeline" }
    },
    "adaptiveFitnessBase": {
        "coherenceProxy": {"label": "Weight: Coherence Proxy"},
        "networkComplexityProxy": {"label": "Weight: Network Complexity Proxy"},
        "averageResonatorScore": {"label": "Weight: Avg. Resonator Score"},
        "goalAchievementProxy": {"label": "Weight: Goal Achievement Proxy"},
        "explorationScore": {"label": "Weight: Exploration Score"},
        "focusScore": {"label": "Weight: Focus Score"},
        "creativityScore": {"label": "Weight: Creativity Score"},
        "conflictPenaltyFactor": {"label": "Weight: Conflict Penalty Factor"}
    },
    "adaptiveFitnessDim": {
        "knowledgeExpansion": {
            "learningEfficiency": {"label": "Dim: Knowl. Exp. -> Learning Eff."},
            "explorationScore": {"label": "Dim: Knowl. Exp. -> Exploration"}
        },
        "internalCoherence": {
            "coherenceProxy": {"label": "Dim: Int. Coherence -> Coherence"},
            "averageResonatorScore": {"label": "Dim: Int. Coherence -> Resonance"}
        },
        "expressiveCreativity": {
            "creativityScore": {"label": "Dim: Expr. Creat. -> Creativity"},
            "creativusActivation": {"label": "Dim: Expr. Creat. -> Creativus Act."},
            "explorationScore": {"label": "Dim: Expr. Creat. -> Exploration"}
        },
        "goalFocus": {
            "goalAchievementProxy": {"label": "Dim: Goal Focus -> Goal Achiev."},
            "focusScore": {"label": "Dim: Goal Focus -> Focus"}
        }
    },
     "group": {
      "localization": "Localization",
      "myraAI": "M.Y.R.A. AI Provider",
      "caelumAI": "C.A.E.L.U.M. AI Provider",
      "configurableAgents": "Configurable Agents",
      "myraPersona": "M.Y.R.A. Persona",
      "caelumPersona": "C.A.E.L.U.M. Persona",
      "myraSystem": "M.Y.R.A. System",
      "caelumSystem": "C.A.E.L.U.M. System",
      "generalSystem": "General System",
      "adaptiveFitnessBase": "Adaptive Fitness (Base W.)",
      "adaptiveFitnessDim": "Adaptive Fitness (Dimensions)",
      "misc": "Miscellaneous"
    }
  },
  "chatInterface": {
    "input": {
      "thinking": "{{name}} is thinking...",
      "promptPlaceholder": "Message {{name}}...",
      "speechListening": "Listening...",
      "speechError": "Speech recognition failed. Please try again."
    },
    "button": {
      "sendMessage": "Send Message",
      "startSpeech": "Start voice input",
      "stopSpeech": "Stop voice input",
      "speakMessage": "Read message aloud",
      "stopSpeaking": "Stop reading",
      "speechPermissionDenied": "Microphone access denied.",
      "speechNotSupported": "Speech recognition is not supported by this browser."
    },
    "retrievedContext": {
      "title": "Retrieved Context ({{count}})"
    }
  },
  "nodePanel": {
    "modulatorNodes": {
        "title": "Modulator Nodes",
        "empty": "No modulator nodes available."
    },
    "semanticNodes": {
        "title": "Semantic Nodes (Sample)",
        "empty": "No semantic nodes available.",
        "showingSome": "Showing {{count}} of {{total}} semantic nodes."
    }
  },
  "subqgDisplay": {
     "error": {
        "matrixUnavailable": "SubQG Energy Matrix ({{size}}x{{size}}) unavailable or incorrect size.",
        "phaseMatrixUnavailable": "SubQG Phase Matrix ({{size}}x{{size}}) unavailable or incorrect size."
    },
    "title": "SubQG Field ({{size}}x{{size}})",
    "label": {
        "injectEnergy": "Inject Energy",
        "setPhase": "Set Phase (Opt.)"
    },
    "placeholder": {
        "phase": "0 to {{maxPhase}} (radians)"
    },
    "info": {
        "clickToInject": "Click a cell to inject energy/phase."
    },
    "jump": {
        "detected": "SubQG Jump Detected!",
        "type": "Type",
        "peakE": "Peak Energy",
        "peakC": "Peak Coherence"
    }
  },
   "systemStatusPanel": {
    "emotion": {
      "title": "Emotion Status",
      "pleasure": "Pleasure",
      "arousal": "Arousal",
      "dominance": "Dominance",
      "dominantAffect": "Dominant Affect",
      "affects": {
        "neutral": "Neutral",
        "anger": "Anger",
        "disgust": "Disgust",
        "fear": "Fear",
        "greed": "Greed",
        "joyful": "Joyful",
        "sad": "Sad"
      }
    },
    "fitness": {
      "title": "Adaptive Fitness",
      "overallScore": "Overall Score",
      "dimensions": {
        "knowledgeExpansion": "Knowledge Expansion",
        "internalCoherence": "Internal Coherence",
        "expressiveCreativity": "Expressive Creativity",
        "goalFocus": "Goal Focus"
      }
    },
    "subQg": {
      "title": "SubQG Metrics",
      "event": "SubQG Event!",
      "statusStable": "SubQG Stable",
      "avgEnergy": "Avg. Energy",
      "stdEnergy": "StdDev Energy",
      "phaseCoherence": "Phase Coherence",
      "jumpModifierActive": "Jump Modifier",
      "jumpModifierValue": "{{value}} ({{steps}} steps)"
    },
    "vitals": {
        "bpm": "BPM",
        "stressLevel": "Stress Level"
    }
  },
  "knowledgePanel": {
    "title": "Knowledge Base Management",
    "upload": {
      "title": "Upload File (.txt, .md, .xlsx, .docx)",
      "selected": "Selected: {{fileName}}"
    },
    "button": {
      "loadFile": "Load & Process File",
      "clearAll": "Clear All",
      "clearAllTitle": "Clear entire knowledge base"
    },
    "sources": {
      "title": "Loaded Sources",
      "empty": "No knowledge sources loaded.",
      "chunkCount": "{{count}} chunks",
      "totalChunks": "Total: {{count}} chunks in DB."
    },
    "errorFileFormat": "Invalid file format. Please select a .txt, .md, .xlsx, or .docx file.",
    "errorProcessingFile": "Error processing file: {{message}}",
    "errorClearingDb": "Error clearing database: {{message}}"
  },
  "dualAiPanel": {
    "label": {
      "initialPrompt": "Initial prompt for {{myraName}} & {{caelumName}}:",
      "rounds": "Rounds:",
      "system": "System"
    },
    "placeholder": {
      "initialPrompt": "Enter the topic or starting question here..."
    },
    "button": {
      "startConversation": "Start Dual Conversation"
    },
    "info": {
        "emptyState": "Start a new dual conversation to observe the interaction between the AIs.",
        "inProgress": "Conversation in progress..."
    },
    "conversationCancelled": "The conversation was cancelled.",
    "retrievedContext": {
      "title": "Retrieved Context ({{count}})"
    }
  },
  "multiAgentConversationPanel": {
    "title": "Multi-Agent Conversation",
    "label": {
      "initialPrompt": "Initial Prompt:",
      "roundsPerAgent": "Rounds per Agent:",
      "selectAgents": "Select Participating Agents:",
      "system": "System",
      "agent": "Agent",
      "unknownAgent": "Unknown Agent"
    },
    "placeholder": {
      "initialPrompt": "Enter the topic or starting question here..."
    },
    "button": {
      "startConversation": "Start Conversation"
    },
    "info": {
        "emptyState": "Select agents and start a new conversation.",
        "inProgress": "Conversation in progress..."
    },
    "retrievedContext": {
      "title": "Retrieved Context ({{count}})"
    }
  },
  "aiService": {
    "relevantInfoLabel": "[RELEVANT INFORMATION FROM KNOWLEDGE BASE]",
    "endInfoLabel": "[END RELEVANT INFORMATION]",
    "corePrinciplesLabel": "CORE ETHICAL PRINCIPLES",
    "currentInternalContextLabel": "CURRENT INTERNAL CONTEXT ({{speakerName}})",
    "responseInstructionLabel": "RESPONSE INSTRUCTION ({{speakerName}})",
    "systemLabel": "System",
    "error": {
      "lmStudioRequestFailed": "LM Studio request failed (Status: {{status}}): {{errorBody}}",
      "lmStudioUnexpectedFormat": "LM Studio: Unexpected response format.",
      "lmStudioGenerationError": "Error generating response from {{speakerName}} via LM Studio.",
      "details": "Details: {{message}}",
      "lmStudioNetworkError": "{{speakerName}} could not reach LM Studio. Is it running at {{baseUrl}}?",
      "geminiNotInitialized": "Gemini API client not initialized. API Key missing?",
      "geminiGenerationError": "Error generating response from {{speakerName}} via Gemini.",
      "geminiApiKeyInvalid": "Gemini API Key is invalid or not authorized.",
      "geminiQuotaExceeded": "Gemini API quota exceeded.",
      "geminiNetworkError": "Network error connecting to Gemini API."
    }
  },
  "emotionTimeline": {
    "title": "Emotion Timeline",
    "chart": {
      "title": "PAD Timeline for {{agentName}}",
      "pleasure": "Pleasure",
      "arousal": "Arousal",
      "dominance": "Dominance",
      "axisTime": "Time",
      "axisValue": "Value (-1 to 1)",
      "noData": "No data available for {{agentName}}."
    },
    "interpretation": {
      "title": "Interpretation of Current State ({{agentName}})",
      "dominantAffect": "Dominant Affect",
      "noData": "No data yet for interpretation."
    }
  },
  "padInterpretations": {
    "elatedExuberant": "Elated, exuberant.",
    "happyDependent": "Happy but dependent.",
    "calmConfident": "Calmly confident, satisfied.",
    "calmContent": "Generally calm and content.",
    "distressedFrustrated": "Distressed, frustrated.",
    "tenseHostile": "Tense, potentially hostile.",
    "depressedPowerless": "Depressed, feeling powerless.",
    "unhappyPassive": "Unhappy, passive.",
    "alertAssertive": "Alert and assertive.",
    "arousedSubmissive": "Aroused but submissive/surprised.",
    "boredControlling": "Bored but in control.",
    "lethargicApathetic": "Lethargic, apathetic.",
    "vulnerableControlled": "Feeling of vulnerability or external control.",
    "activatedConfident": "Activated, confident stance.",
    "neutralComplex": "Neutral or complex emotional state."
  },
  "documentationPanel": {
    "title": "Documentation",
    "selectDocumentLabel": "Select Document:",
    "loading": "Loading documentation...",
    "error": {
      "title": "Error Loading Documentation",
      "fetchFailed": "Failed to fetch file (Status: {{status}}).",
      "fileNotFoundInternal": "Selected documentation file not found.",
      "genericFetchError": "An error occurred while fetching the documentation.",
      "noContent": "No content available for this document or none selected."
    },
    "files": {
      "main": "Main Documentation",
      "config_adaptive_fitness": "Config: Adaptive Fitness",
      "config_ai_provider": "Config: AI Provider",
      "config_knowledge_rag": "Config: Knowledge Base & RAG",
      "config_persona_behavior": "Config: Persona & Behavior",
      "config_subqg_simulation": "Config: SubQG Simulation"
    }
  }
}
